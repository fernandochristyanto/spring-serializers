def avroToolsVersion = "1.10.0"
def taskGroup = "build avro"
def externalLibsFolderPath = "${rootDir.absolutePath}/libs"
def avroToolsJarPath = "${externalLibsFolderPath}/avro-tools-${avroToolsVersion}.jar"

task downloadAvroTools {
    group(taskGroup)

    doLast {
        if (!file(avroToolsJarPath).exists()) {
            println("Downloading avro-tools into ${avroToolsJarPath}")
            ant.get(dest: avroToolsJarPath,
                    src: "https://repo1.maven.org/maven2/org/apache/avro/avro-tools/${avroToolsVersion}/avro-tools-${avroToolsVersion}.jar")
        }
    }
}

def avroSchemasFolderPath = "${rootDir.absolutePath}/avro-schemas"
def avroBuildDestPath = "${projectDir.absolutePath}/src/main/generated-avro"

task executeAvroTools {
    group(taskGroup)

    dependsOn downloadAvroTools
    doLast {
        def avroFiles = [
                "${avroSchemasFolderPath}/todo/task.asvc",
                "${avroSchemasFolderPath}/todo/todo.asvc",
                "${avroSchemasFolderPath}/todo/create-todo/create-todo-request.asvc",
                "${avroSchemasFolderPath}/todo/publish-todo/publish-todo-message.asvc",
        ]

        def execArgs = [avroToolsJarPath, "compile", "-string", "schema"] + avroFiles + [avroBuildDestPath]
        javaexec {
            main = "-jar"
            args = execArgs
        }
    }
}